import type { AddEventResult, EventBuffer, RecordingEvent } from '../types';
/**
 * A basic event buffer that does not do any compression.
 * Used as fallback if the compression worker cannot be loaded or is disabled.
 */
export declare class EventBufferArray implements EventBuffer {
    private _events;
    constructor();
    /** @inheritdoc */
    get pendingLength(): number;
    /**
     * Returns the raw events that are buffered. In `EventBufferArray`, this is the
     * same as `this._events`.
     */
    get pendingEvents(): RecordingEvent[];
    /** @inheritdoc */
    destroy(): void;
    /** @inheritdoc */
    addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult>;
    /** @inheritdoc */
    finish(): Promise<string>;
}
//# sourceMappingURL=EventBufferArray.d.ts.map